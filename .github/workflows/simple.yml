# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Code inspected ${{ vars.TESTVARIABLE }}!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Andrea Pe√±aranda Neira,
          echo Lorem ipsum dolor sit amet
          echo consectetur adipiscing elit
          echo Etiam eu elit ac nulla tincidunt varius imperdiet vitae ante.
          echo this is my secret: ${{ secrets.TESTPASSWORD }}!

      - name: Login in docker.
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Debug Dockerfile presence
        run: |
          echo "Listing files in the flask-app directory:"
          ls .
      
      - name: Build the Docker image
        run: |
          docker build -f ./Dockerfile -t "${{ vars.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}:${{ vars.IMAGE_TAG }}" .

      - name: Push to Docker Hub
        run: |
          docker push "${{ vars.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}:${{ vars.IMAGE_TAG }}"

      - name: Run the container
        run: |
          docker run -d --name test-container -p 8080:80 "${{ vars.DOCKER_USERNAME }}/${{ vars.IMAGE_NAME }}:${{ vars.IMAGE_TAG }}"

      - name: Test the container with curl
        run: |
          curl -I http://localhost:8080

      - name: Stop and remove the container
        run: |
          docker stop test-container



